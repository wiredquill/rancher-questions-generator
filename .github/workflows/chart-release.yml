name: Chart Release and Versioning

on:
  push:
    branches: [ main ]
    paths:
      - 'charts/**'
      - 'k8s/**'
      - 'backend/**'
      - 'frontend/**'
      - 'frontend-simple/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'charts/**'
      - 'k8s/**'
      - 'backend/**'
      - 'frontend/**'
      - 'frontend-simple/**'

env:
  CHART_PATH: charts/rancher-questions-generator

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      chart-changed: ${{ steps.changes.outputs.chart }}
      deployment-changed: ${{ steps.changes.outputs.deployment }}
      version-bump: ${{ steps.version.outputs.bump }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          chart:
            - 'charts/**'
          deployment:
            - 'k8s/**'
            - 'backend/**'
            - 'frontend/**'
            - 'frontend-simple/**'

    - name: Determine version bump
      id: version
      run: |
        if [[ "${{ steps.changes.outputs.chart }}" == "true" ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.changes.outputs.deployment }}" == "true" ]]; then
          echo "bump=patch" >> $GITHUB_OUTPUT
        else
          echo "bump=none" >> $GITHUB_OUTPUT
        fi

  lint-and-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.chart-changed == 'true' || needs.detect-changes.outputs.deployment-changed == 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Lint Helm chart
      run: |
        helm lint ${{ env.CHART_PATH }}

    - name: Template Helm chart
      run: |
        helm template test-release ${{ env.CHART_PATH }} --debug

    - name: Validate Kubernetes manifests
      run: |
        helm template test-release ${{ env.CHART_PATH }} | kubectl --dry-run=client apply -f -

  bump-version:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-test]
    if: needs.detect-changes.outputs.version-bump != 'none' && github.event_name == 'push'
    outputs:
      new-version: ${{ steps.bump.outputs.new-version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(grep '^version:' ${{ env.CHART_PATH }}/Chart.yaml | cut -d' ' -f2)
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Bump version
      id: bump
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        BUMP_TYPE="${{ needs.detect-changes.outputs.version-bump }}"
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Bump version based on type
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Update Chart.yaml
        sed -i "s/^version:.*/version: $NEW_VERSION/" ${{ env.CHART_PATH }}/Chart.yaml
        sed -i "s/^appVersion:.*/appVersion: \"$NEW_VERSION\"/" ${{ env.CHART_PATH }}/Chart.yaml
        
        echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"

    - name: Commit version bump
      run: |
        git add ${{ env.CHART_PATH }}/Chart.yaml
        git commit -m "chore: bump chart version to ${{ steps.bump.outputs.new-version }}

        ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>"
        git push

  package-and-release:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-test, bump-version]
    if: needs.detect-changes.outputs.version-bump != 'none' && github.event_name == 'push'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Package Helm chart
      run: |
        helm package ${{ env.CHART_PATH }} --destination ./packaged-charts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.bump-version.outputs.new-version }}
        name: "Release v${{ needs.bump-version.outputs.new-version }}"
        body: |
          ## Rancher Questions Generator v${{ needs.bump-version.outputs.new-version }}
          
          ### Changes
          - Chart version bumped to ${{ needs.bump-version.outputs.new-version }}
          - Updated deployment configurations
          
          ### Installation
          ```bash
          helm repo add rancher-questions-generator https://github.com/wiredquill/rancher-questions-generator/releases/download/v${{ needs.bump-version.outputs.new-version }}
          helm install my-questions-generator rancher-questions-generator/rancher-questions-generator
          ```
          
          ### Rancher Catalog Installation
          Add this repository to your Rancher Apps & Marketplace:
          - Repository URL: `https://github.com/wiredquill/rancher-questions-generator`
          - Branch: `main` 
          
          ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
        files: |
          packaged-charts/*.tgz
        draft: false
        prerelease: false

  update-helm-index:
    runs-on: ubuntu-latest
    needs: [bump-version, package-and-release]
    if: needs.detect-changes.outputs.version-bump != 'none' && github.event_name == 'push'
    steps:
    - name: Checkout gh-pages
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout main
      uses: actions/checkout@v4
      with:
        ref: main
        path: main

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Package chart for index
      run: |
        cd main
        helm package ${{ env.CHART_PATH }} --destination ../gh-pages/

    - name: Update Helm index
      run: |
        cd gh-pages
        helm repo index . --url https://github.com/${{ github.repository }}/releases/download/v${{ needs.bump-version.outputs.new-version }}

    - name: Commit and push index
      run: |
        cd gh-pages
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update Helm repository index for v${{ needs.bump-version.outputs.new-version }}"
        git push

  notify-success:
    runs-on: ubuntu-latest
    needs: [bump-version, package-and-release, update-helm-index]
    if: always() && needs.bump-version.result == 'success'
    steps:
    - name: Success notification
      run: |
        echo "âœ… Chart successfully released as v${{ needs.bump-version.outputs.new-version }}"
        echo "ðŸ“¦ Package available at: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.bump-version.outputs.new-version }}"
        echo "ðŸ“‹ Helm repository updated at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"